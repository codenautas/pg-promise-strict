{"version":3,"file":"pg-promise-strict.js","sourceRoot":"","sources":["../../src/lib/pg-promise-strict.ts"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nimport * as fs from 'fs-extra';\r\nimport * as pg from 'pg';\r\nconst pgTypes = pg.types;\r\n\r\nimport {from as copyFrom} from 'pg-copy-streams';\r\nimport * as util from 'util';\r\nimport * as likeAr from 'like-ar';\r\nimport * as bestGlobals from 'best-globals';\r\nimport {Stream} from 'stream';\r\n\r\nexport var debug:{\r\n    pool?:true|{\r\n        [key:string]:{ count:number, client:(pg.Client|pg.PoolClient)&{secretKey:string}}\r\n    }\r\n}={};\r\n\r\nexport var defaults={\r\n    releaseTimeout:{inactive:60000, connection:600000}\r\n};\r\n\r\nexport var log:(message:string, type:string)=>void=function(){};\r\n\r\nexport function quoteIdent(name:string){\r\n    if(typeof name!==\"string\"){\r\n        throw new Error(\"insane name\");\r\n    }\r\n    return '\"'+name.replace(/\"/g, '\"\"')+'\"';\r\n};\r\n\r\nexport function quoteIdentList(objectNames:string[]){\r\n    return objectNames.map(function(objectName){ return quoteIdent(objectName); }).join(',');\r\n};\r\n\r\nexport type AnyQuoteable = string|number|Date|{isRealDate:boolean, toYmd:()=>string}|{toPostgres:()=>string}|{toString:()=>string};\r\nexport function quoteNullable(anyValue:null|AnyQuoteable){\r\n    if(anyValue==null){\r\n        return 'null';\r\n    }\r\n    var text:string\r\n    if(typeof anyValue===\"string\"){\r\n        text = anyValue;\r\n    }else if(!(anyValue instanceof Object)){\r\n        text=anyValue.toString();\r\n    }else if('isRealDate' in anyValue && anyValue.isRealDate){\r\n        text = anyValue.toYmd();\r\n    }else if(anyValue instanceof Date){\r\n        text = anyValue.toISOString();\r\n    }else if('toPostgres' in anyValue && anyValue.toPostgres instanceof Function){\r\n        text = anyValue.toPostgres();\r\n    }else{\r\n        text = anyValue.toString();\r\n    }\r\n    return \"'\"+text.replace(/'/g,\"''\")+\"'\";\r\n};\r\n\r\nexport function quoteLiteral(anyValue:AnyQuoteable){\r\n    if(anyValue==null){\r\n        throw new Error(\"null in quoteLiteral\");\r\n    }\r\n    return quoteNullable(anyValue);\r\n};\r\n\r\nexport function adaptParameterTypes(parameters?:any[]){\r\n    // @ts-ignore \r\n    if(parameters==null){\r\n        return null;\r\n    }\r\n    return parameters.map(function(value){\r\n        if(value && value.typeStore){\r\n            return value.toLiteral();\r\n        }\r\n        return value;\r\n    });\r\n};\r\n\r\nfunction rejecter():Promise<void>{\r\n    return Promise.reject(new Error(\"pg-promise-strict: not call function as thenable\"));\r\n}\r\n\r\nexport function NotTheneable(){\r\n    return {\r\n        then:rejecter(),\r\n        catch:rejecter(),\r\n    };\r\n}\r\n\r\nexport var easy:boolean=true; // deprecated!\r\n\r\nexport type ConnectParams={\r\n    motor?:\"postgres\"\r\n    database?:string\r\n    user?:string\r\n    password?:string\r\n    port?:number\r\n}\r\n\r\nexport type CopyFromOpts={stream:Stream, table:string,columns?:string[],done?:(err?:Error)=>void}\r\nexport type BulkInsertParams={schema?:string,table:string,columns:string[],rows:[][], onerror?:(err:Error, row:[])=>void}\r\n\r\n/** TODO: any en opts */\r\nexport class Client{\r\n    private connected:null|{\r\n        lastOperationTimestamp:number,\r\n        lastConnectionTimestamp:number\r\n    }=null;\r\n    private fromPool:boolean=false;\r\n    private postConnect(){\r\n        var nowTs=new Date().getTime();\r\n        this.connected = {\r\n            lastOperationTimestamp:nowTs,\r\n            lastConnectionTimestamp:nowTs\r\n        }\r\n    }\r\n    private _client:(pg.Client|pg.PoolClient)&{secretKey:string}|null;\r\n    constructor(connOpts:ConnectParams|null, client:(pg.Client|pg.PoolClient), private _done:()=>void, _opts?:any){\r\n        this._client = client as (pg.Client|pg.PoolClient)&{secretKey:string};\r\n        if(connOpts==null){\r\n            this.fromPool=true;\r\n            this.postConnect();\r\n            /* DOING\r\n            if(self.opts.timeoutController){\r\n                cancelTimeout(self.timeoutController);\r\n            }\r\n            self.timeoutController = setInterval(function(){\r\n                // console.log('zzzzzzzzzzzzz',new Date().getTime() - self.lastOperationTimestamp, self.opts.releaseTimeout.inactive)\r\n                if(new Date().getTime() - self.lastOperationTimestamp  > self.opts.releaseTimeout.inactive\r\n                || new Date().getTime() - self.lastConnectionTimestamp > self.opts.releaseTimeout.connection\r\n                ){\r\n                    self.done();\r\n                }\r\n            },Math.min(1000,self.opts.releaseTimeout.inactive/4));\r\n            */\r\n            if(debug.pool){\r\n                if(debug.pool===true){\r\n                    debug.pool={};\r\n                }\r\n                if(!(this._client.secretKey in debug.pool)){\r\n                    debug.pool[this._client.secretKey] = {client:this._client, count:0};\r\n                }\r\n                debug.pool[this._client.secretKey].count++;\r\n            }\r\n        }else{\r\n            // pgPromiseStrict.log('new Client');\r\n            this._client = new pg.Client(connOpts) as pg.Client&{secretKey:string};\r\n            this._client.secretKey = this._client.secretKey||'secret_'+Math.random();\r\n        }\r\n    }\r\n    connect(){\r\n        if(this.fromPool){\r\n            throw new Error(\"pg-promise-strict: Must not connect client from pool\")\r\n        }\r\n        if(arguments.length){\r\n            return Promise.reject(new Error('client.connect must no receive parameters, it returns a Promise'));\r\n        }\r\n        if(!this._client){\r\n            throw new Error(\"pg-promise-strict: lack of Client._client\");\r\n        }\r\n        /** @type {pg.Client} */\r\n        var client = this._client;\r\n        var self = this;\r\n        return new Promise(function(resolve, reject){\r\n            client.connect(function(err){\r\n                if(err){\r\n                    reject(err);\r\n                }else{\r\n                    self.postConnect();\r\n                    resolve(self);\r\n                }\r\n            });\r\n        });\r\n    };\r\n    end(){\r\n        if(this.fromPool){\r\n            throw new Error(\"pg-promise-strict: Must not end client from pool\")\r\n        }\r\n        if(this._client instanceof pg.Client){\r\n            this._client.end();\r\n        }else{\r\n            throw new Error(\"pg-promise-strict: lack of Client._client\");\r\n        }\r\n    };\r\n    done(){\r\n        if(!this._client){\r\n            throw new Error(\"pg-promise-strict client already done\");\r\n        }\r\n        if(debug.pool){\r\n            // @ts-ignore DEBUGGING\r\n            debug.pool[this._client.secretKey].count--;\r\n        }\r\n        var clientToDone=this._client;\r\n        this._client=null;\r\n        // @ts-ignore arguments Array like and applyable\r\n        return this._done.apply(clientToDone, arguments);\r\n    }\r\n    query(sql:string):Query\r\n    query(sql:string, params:any[]):Query\r\n    query(sqlObject:{text:string, values:any[]}):Query\r\n    query():Query{\r\n        if(!this.connected){\r\n            throw new Error(\"pg-promise-strict: query in not connected\")\r\n        }\r\n        if(!this._client){\r\n            // @ts-ignore THIS IS A HACK FOR LEGACY CALLS TO wait ...query();\r\n            return NotTheneable();\r\n        }\r\n        this.connected.lastOperationTimestamp = new Date().getTime();\r\n        var queryArguments = Array.prototype.slice.call(arguments);\r\n        var queryText;\r\n        var queryValues=null;\r\n        if(typeof queryArguments[0] === 'string'){\r\n            queryText = queryArguments[0];\r\n            queryValues = queryArguments[1] = adaptParameterTypes(queryArguments[1]||null);\r\n        }else if(queryArguments[0] instanceof Object){\r\n            queryText = queryArguments[0].text;\r\n            queryValues = adaptParameterTypes(queryArguments[0].values||null);\r\n            queryArguments[0].values = queryValues;\r\n        }\r\n        if(log){\r\n            var sql=queryText;\r\n            log('------','------');\r\n            if(queryValues){\r\n                log('`'+sql+'\\n`','QUERY-P');\r\n                log('-- '+JSON.stringify(queryValues),'QUERY-A');\r\n                queryValues.forEach(function(value:any, i:number){\r\n                    sql=sql.replace(new RegExp('\\\\$'+(i+1)+'\\\\b'), typeof value == \"number\" || typeof value == \"boolean\"?value:quoteNullable(value));\r\n                });\r\n            }\r\n            log(sql+';','QUERY');\r\n        }\r\n        var returnedQuery = this._client.query(new pg.Query(queryArguments[0], queryArguments[1]));\r\n        return new Query(returnedQuery, this, this._client);\r\n    };\r\n    async executeSentences(sentences:string[]){\r\n        var self = this;\r\n        if(!this._client || !this.connected){\r\n            throw new Error('pg-promise-strict: atempt to executeSentences on not connected '+!this._client+','+!this.connected)\r\n        }\r\n        var cdp:Promise<ResultCommand|void> = Promise.resolve();\r\n        sentences.forEach(function(sentence){\r\n            cdp = cdp.then(async function(){\r\n                if(!sentence.trim()){\r\n                    return ;\r\n                }\r\n                return await self.query(sentence).execute().catch(function(err:Error){\r\n                    // console.log('ERROR',err);\r\n                    // console.log(sentence);\r\n                    throw err;\r\n                });\r\n            });\r\n        });\r\n        return cdp;\r\n    }\r\n    async executeSqlScript(fileName:string){\r\n        var self=this;\r\n        if(!this._client || !this.connected){\r\n            throw new Error('pg-promise-strict: atempt to executeSqlScript on not connected '+!this._client+','+!this.connected)\r\n        }\r\n        return fs.readFile(fileName,'utf-8').then(function(content){\r\n            var sentences = content.split(/\\r?\\n\\r?\\n/);\r\n            return self.executeSentences(sentences);\r\n        });\r\n    }\r\n    /** @param {pgps.} params*/\r\n    bulkInsert(params:BulkInsertParams):Promise<void>{\r\n        var self = this;\r\n        if(!this._client || !this.connected){\r\n            throw new Error('pg-promise-strict: atempt to bulkInsert on not connected '+!this._client+','+!this.connected)\r\n        }\r\n        var sql = \"INSERT INTO \"+(params.schema?quoteIdent(params.schema)+'.':'')+\r\n            quoteIdent(params.table)+\" (\"+\r\n            params.columns.map(quoteIdent).join(', ')+\") VALUES (\"+\r\n            params.columns.map(function(_name:string, i_name:number){ return '$'+(i_name+1); })+\")\";\r\n        var insertOneRowAndContinueInserting = function insertOneRowAndContinueInserting(i_rows:number):Promise<void>{\r\n            if(i_rows<params.rows.length){\r\n                return self.query(sql, params.rows[i_rows]).execute().catch(function(err:Error){\r\n                    if(params.onerror){\r\n                        params.onerror(err, params.rows[i_rows]);\r\n                    }else{\r\n                        throw err;\r\n                    }\r\n                }).then(function(){\r\n                    return insertOneRowAndContinueInserting(i_rows+1);\r\n                });\r\n            }\r\n            return Promise.resolve();\r\n        };\r\n        return insertOneRowAndContinueInserting(0);\r\n    }\r\n    copyFrom(opts:CopyFromOpts){\r\n        if(!this._client || !this.connected){\r\n            throw new Error('pg-promise-strict: atempt to copyFrom on not connected '+!this._client+','+!this.connected)\r\n        }\r\n        if(!this._client){\r\n            throw new Error(\"pg-promise-stric: no Client._client in copyFrom\")\r\n        }\r\n        var stream = this._client.query(copyFrom(`'COPY ${opts.table} ${opts.columns?`(${opts.columns.map(name=>quoteIdent(name)).join(',')})`:''} FROM STDIN`));\r\n        if(opts.done){\r\n            stream.on('error', opts.done);\r\n            stream.on('end', opts.done);\r\n        }\r\n        if(opts.stream){\r\n            if(opts.done){\r\n                opts.stream.on('error', opts.done);\r\n            }\r\n            opts.stream.pipe(stream);\r\n        }\r\n        return stream;\r\n    }\r\n}\r\n\r\nvar queryResult:pg.QueryResult;\r\n\r\nexport interface Result{\r\n    rowCount:number\r\n    fields:typeof queryResult.fields\r\n}\r\nexport interface ResultCommand{\r\n    command:string, rowCount:number\r\n}\r\nexport interface ResultOneRow extends Result{\r\n    row:{[key:string]:any}\r\n}\r\nexport interface ResultOneRowIfExists extends Result{\r\n    row?:{[key:string]:any}|null\r\n}\r\nexport interface ResultRows extends Result{\r\n    rows:{[key:string]:any}[]\r\n}\r\nexport interface ResultValue extends Result{\r\n    value:any\r\n}\r\n// export interface ResultGeneric extends ResultValue, ResultRows, ResultOneRowIfExists, ResultOneRow, Result{}\r\nexport type ResultGeneric = ResultValue|ResultRows|ResultOneRowIfExists|ResultOneRow|Result|ResultCommand\r\n\r\n/*\r\nfunction buildQueryCounterAdapter(\r\n    minCountRow:number, \r\n    maxCountRow:number, \r\n    expectText:string, \r\n    callbackOtherControl?:(result:pg.QueryResult, resolve:(result:ResultGeneric)=>void, reject:(err:Error)=>void)=>void\r\n){\r\n    return function queryCounterAdapter(result:pg.QueryResult, resolve:(result:ResultGeneric)=>void, reject:(err:Error)=>void){ \r\n        if(result.rows.length<minCountRow || result.rows.length>maxCountRow ){\r\n            var err=new Error('query expects '+expectText+' and obtains '+result.rows.length+' rows');\r\n            // @ts-ignore EXTENDED ERROR\r\n            err.code='54011!';\r\n            reject(err);\r\n        }else{\r\n            if(callbackOtherControl){\r\n                callbackOtherControl(result, resolve, reject);\r\n            }else{\r\n                var {rows, ...other} = result;\r\n                resolve({row:rows[0], ...other});\r\n            }\r\n        }\r\n    };\r\n}\r\n*/\r\n\r\ntype Notice = string;\r\n\r\nclass Query{\r\n    constructor(private _query:pg.Query, public client:Client, private _internalClient:pg.Client|pg.PoolClient){\r\n    }\r\n    onNotice(callbackNoticeConsumer:(notice:Notice)=>void):Query{\r\n        var q = this;\r\n        var noticeCallback=function(notice:Notice){\r\n            // @ts-ignore  DOES NOT HAVE THE CORRECT TYPE! LACKS of activeQuery\r\n            if(q._internalClient.activeQuery==q._query){\r\n                callbackNoticeConsumer(notice);\r\n            }\r\n        }\r\n        // @ts-ignore .on('notice') DOES NOT HAVE THE CORRECT TYPE!\r\n        this._internalClient.on('notice',noticeCallback);\r\n        var removeNoticeCallback=function removeNoticeCallback(){\r\n            q._internalClient.removeListener('notice',noticeCallback);\r\n        }\r\n        this._query.on('end',removeNoticeCallback);\r\n        this._query.on('error',removeNoticeCallback);\r\n        return this;\r\n    };\r\n    private _execute<TR extends ResultGeneric>(\r\n        adapterCallback:null|((result:pg.QueryResult, resolve:(result:TR)=>void, reject:(err:Error)=>void)=>void),\r\n        callbackForEachRow?:(row:{}, result:pg.QueryResult)=>Promise<void>, \r\n    ):Promise<TR>{\r\n        var q = this;\r\n        return new Promise<TR>(function(resolve, reject){\r\n            q._query.on('error',function(err){\r\n                if(log){\r\n                    // @ts-ignore EXTENDED ERROR\r\n                    log('--ERROR! '+err.code+', '+err.message, 'ERROR');\r\n                }\r\n                reject(err);\r\n            });\r\n            // @ts-ignore .on('row') DOES NOT HAVE THE CORRECT TYPE!\r\n            q._query.on('row',function(row:{}, result:pg.QueryResult){\r\n                if(callbackForEachRow){\r\n                    if(log){\r\n                        log('-- '+JSON.stringify(row), 'ROW');\r\n                    }\r\n                    callbackForEachRow(row, result);\r\n                }else{\r\n                    // @ts-ignore addRow ommited DOES NOT HAVE THE CORRECT TYPE!\r\n                    result.addRow(row);\r\n                }\r\n            });\r\n            q._query.on('end',function(result){\r\n                // TODO: VER SI ESTO ES NECESARIO\r\n                // result.client = q.client;\r\n                if(log){\r\n                    log('-- '+JSON.stringify(result.rows), 'RESULT');\r\n                }\r\n                if(adapterCallback){\r\n                    adapterCallback(result, resolve, reject);\r\n                }else{\r\n                    resolve();\r\n                }\r\n            });\r\n        });\r\n    };\r\n    async fetchUniqueValue():Promise<ResultValue>  { \r\n        var {row, ...result} = await this.fetchUniqueRow();\r\n        if(result.fields.length!==1){\r\n            var err=new Error('query expects one field and obtains '+result.fields.length);\r\n            // @ts-ignore EXTENDED ERROR\r\n            err.code='54U11!';\r\n            throw err;\r\n        }\r\n        return {value:row[result.fields[0].name], ...result};\r\n    }\r\n    fetchUniqueRow(acceptNoRows?:boolean):Promise<ResultOneRow> { \r\n        return this._execute(function(result:pg.QueryResult, resolve:(result:ResultOneRow)=>void, reject:(err:Error)=>void):void{\r\n            if(result.rowCount!==1 && (!acceptNoRows || !result.rowCount)){\r\n                var err=new Error('query expects one row and obtains '+result.rowCount);\r\n                // @ts-ignore EXTENDED ERROR\r\n                err.code='54011!';\r\n                reject(err);\r\n            }else{\r\n                var {rows, ...rest} = result;\r\n                resolve({row:rows[0], ...rest});\r\n            }\r\n        });\r\n    }\r\n    fetchOneRowIfExists():Promise<ResultOneRow> { \r\n        return this.fetchUniqueRow(true);\r\n    }\r\n    fetchAll():Promise<ResultRows>{\r\n        return this._execute(function(result:pg.QueryResult, resolve:(result:ResultRows)=>void, _reject:(err:Error)=>void):void{\r\n            resolve(result);\r\n        });\r\n    }\r\n    execute():Promise<ResultCommand>{ \r\n        return this._execute(function(result:pg.QueryResult, resolve:(result:ResultCommand)=>void, _reject:(err:Error)=>void):void{\r\n            var {rows, oid, fields, ...rest} = result;\r\n            resolve(rest);\r\n        });\r\n    }\r\n    async fetchRowByRow(cb:(row:{}, result:pg.QueryResult)=>Promise<void>):Promise<void>{ \r\n        if(!(cb instanceof Function)){\r\n            var err=new Error('fetchRowByRow must receive a callback that executes for each row');\r\n            // @ts-ignore EXTENDED ERROR\r\n            err.code='39004!';\r\n            return Promise.reject(err);\r\n        }\r\n        await this._execute(null, cb);\r\n    }\r\n    async onRow(cb:(row:{}, result:pg.QueryResult)=>Promise<void>):Promise<void>{ \r\n        return this.fetchRowByRow(cb);\r\n    }\r\n    then(){\r\n        throw new Error('pg-promise-strict: Query must not be awaited nor thened')\r\n    }\r\n    catch(){\r\n        throw new Error('pg-promise-strict: Query must not be awaited nor catched')\r\n    }\r\n};\r\n\r\nexport var allTypes=false;\r\n\r\nexport function setAllTypes(){\r\n    var TypeStore = require('type-store');\r\n    var DATE_OID = 1082;\r\n    pgTypes.setTypeParser(DATE_OID, function parseDate(val){\r\n       return bestGlobals.date.iso(val);\r\n    });\r\n    likeAr(TypeStore.type).forEach(function(_typeDef, typeName){\r\n        var typer = new TypeStore.type[typeName]();\r\n        if(typer.pgSpecialParse){\r\n            (typer.pg_OIDS||[typer.pg_OID]).forEach(function(OID:number){\r\n                pgTypes.setTypeParser(OID, function(val){\r\n                    return typer.fromString(val);\r\n                });\r\n            });\r\n        }\r\n    });\r\n};\r\n\r\nvar pools:{\r\n    [key:string]:pg.Pool\r\n} = {}\r\n\r\nexport function connect(connectParameters:ConnectParams){\r\n    if(allTypes){\r\n        setAllTypes();\r\n    }\r\n    return new Promise(function(resolve, reject){\r\n        var idConnectParameters = JSON.stringify(connectParameters);\r\n        var pool = pools[idConnectParameters]||new pg.Pool(connectParameters);\r\n        pools[idConnectParameters] = pool;\r\n        pool.connect(function(err, client, done){\r\n            if(err){\r\n                reject(err);\r\n            }else{\r\n                resolve(new Client(null, client, done /*, DOING {\r\n                    releaseTimeout: changing(pgPromiseStrict.defaults.releaseTimeout,connectParameters.releaseTimeout||{})\r\n                }*/));\r\n            }\r\n        });\r\n    });\r\n};\r\n\r\nexport function logLastError(message:string, messageType:string):void{\r\n    if(messageType){\r\n        if(messageType=='ERROR'){\r\n            console.log('PG-ERROR pgPromiseStrict.logLastError.inFileName',logLastError.inFileName);\r\n            console.log('PG-ERROR',message);\r\n            if(logLastError.inFileName){\r\n                var lines=['PG-ERROR '+message];\r\n                /*jshint forin:false */\r\n                for(var attr in logLastError.receivedMessages){\r\n                    lines.push(\"------- \"+attr+\":\\n\"+logLastError.receivedMessages[attr]);\r\n                }\r\n                /*jshint forin:true */\r\n                /*eslint guard-for-in: 0*/\r\n                fs.writeFile(logLastError.inFileName,lines.join('\\n'));\r\n            }else{\r\n                /*jshint forin:false */\r\n                for(var attr2 in logLastError.receivedMessages){\r\n                    console.log(attr2, logLastError.receivedMessages[attr2]);\r\n                }\r\n                /*jshint forin:true */\r\n                /*eslint guard-for-in: 0*/\r\n            }\r\n            logLastError.receivedMessages = {};\r\n        }else{\r\n            logLastError.receivedMessages[messageType] = message;\r\n        }\r\n    }\r\n}\r\n\r\nlogLastError.inFileName = './local-sql-error.log';\r\nlogLastError.receivedMessages={} as {\r\n    [key:string]:string\r\n};\r\n\r\nexport function poolBalanceControl(){\r\n    var rta:string[]=[];\r\n    if(typeof debug.pool === \"object\"){\r\n        likeAr(debug.pool).forEach(function(pool){\r\n            if(pool.count){\r\n                rta.push('pgPromiseStrict.debug.pool unbalanced connection '+util.inspect(pool));\r\n            }\r\n        });\r\n    }\r\n    return rta.join('\\n');\r\n};\r\n\r\n/* istanbul ignore next */\r\nprocess.on('exit',function(){\r\n    console.warn(poolBalanceControl());\r\n});\r\n"]}